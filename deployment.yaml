apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: healthlink-dashboard
spec:
  replicas: 1 
  template:
    metadata:
      name: healthlink-dashboard
      labels:
        app: healthlink-dashboard
    spec:
      containers:
        - image: registry.healthlink.network/healthlink-dashboard:latest
          name: healthlink-dashboard
          env:
          - name: RPC_USER
            valueFrom:
              secretKeyRef:
                name: factom
                key: user
          - name: RPC_PASS
            valueFrom:
              secretKeyRef:
                name: factom
                key: user
          - name: MONGODB_PASS
            valueFrom:
              secretKeyRef:
                name: mongodb
                key: mongodb-root-password
          - name: API_URL
            value: 'https://mpi.healthlink.network/'
      imagePullSecrets:
        - name: regcred
---
apiVersion: v1
kind: Service
metadata:
  name: healthlink-dashboard
spec:
  ports:
    - name: mpi-dashboard
      port: 8080 # testnet p2p
      protocol: TCP
      targetPort: 8080

  selector:
    app: healthlink-dashboard
  type: ClusterIP
status:
  loadBalancer: {}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    certmanager.k8s.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
  name: healthlink-dashboard
spec:
  rules:
  - host: www.healthlink.network # Use the domain you want for this service
    http:
      paths:
      - backend:
          serviceName: healthlink-dashboard
          servicePort: 9090
        path: /
  tls:
  - hosts:
    - www.healthlink.network # use domain name also here
    secretName: www-healthlink-network-crt # Make sure this is different from existing secret and cert names.
status:
  loadBalancer:
    ingress:
    - {}

